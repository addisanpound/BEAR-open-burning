# Install CRAN packages
install.packages(c("tidyverse", "ggplot2", "sf", "rnaturalearth", "rnaturalearthdata", "dplyr", "viridis"))

# Install devtools package
install.packages("devtools")

# Install rnaturalearthhires from GitHub
devtools::install_github("ropensci/rnaturalearthhires")

# List of packages to load
packages <- c("ggspatial", "tidyverse", "readxl", "ggplot2", "sf", 
              "rnaturalearth", "devtools", "dplyr", "viridis")

# Load all packages
lapply(packages, library, character.only = TRUE)

# Set the working directory where project is saved
setwd("Y:/AP_Compliance/Projects/BEAR data analysis")

# List files in the directory to confirm which file to load
list.files("Y:/AP_Compliance/Projects/BEAR data analysis")

# Load the complaints data
## This is the only file name that will chnage based on year
### Use the following naming method to keep files organized Y:/AP_Compliance/Projects/BEAR data analysis/XXXX/XXXX_Data_BEAR.xlsx"
complaints_data <- read_excel("")

# Load the counties coordinates data
counties_data <- read_csv("Y:/AP_Compliance/Projects/BEAR data analysis/County_Coordinates.csv")

# Convert complaints data to spatial data
## not sure this is needed if not using town coordinates to map data points? 
complaints_data_sf <- complaints_data %>%
  mutate(Latitude = as.numeric(Latitude),
         Longitude = as.numeric(Longitude)) %>%
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)

# Convert counties data to spatial data
counties_data_sf <- counties_data %>%
  mutate(Latitude = as.numeric(Latitude),
         Longitude = as.numeric(Longitude)) %>%
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)

# Join/combine county coordinates data to complaints data
complaints_data_sf <- complaints_data_sf %>%
  st_join(counties_data_sf, join = st_within) %>%
  mutate(County = coalesce(County.y, County.x)) %>%
  select(-County.x, -County.y)

# Aggregate the number of complaints by county
complaints_count <- complaints_data_sf %>%
  group_by(County) %>%
  summarize(Complaints = n(), .groups = 'drop')

# Convert counties_data_sf to data frame
counties_data_df <- as.data.frame(counties_data_sf)

# Join aggregated complaints data
counties_data_df <- counties_data_df %>%
  left_join(complaints_count, by = "County")

# Convert back to an sf object
counties_data_sf <- st_as_sf(counties_data_df, crs = st_crs(counties_data_sf))

# Test reading a known good file if available
## Replace with an actual path to a test file
test_shapefile <- st_read("FS_VCGI_OPENDATA_Boundary_BNDHASH_poly_counties_SP_v1_-196546973346571976 (2).geojson")

# rename the data file 
county_boundaries <- st_read("FS_VCGI_OPENDATA_Boundary_BNDHASH_poly_counties_SP_v1_-196546973346571976 (2).geojson")

# Plot the map with Vermont boundaries and complaint density
ggplot() +
  
  # Plot the boundaries
  geom_sf (data = county_boundaries, fill = "white", color = "black") +
  
  # Add complaint data
  geom_sf(data = counties_data_sf, aes(size = Complaints, color = Complaints), alpha = 0.6) +
  
  # Customize color and size scales
  scale_color_viridis_c(option = "cividis", name = "Number of Complaints") +
  scale_size_continuous(range = c(1, 10)) + # Removed/did not include Size legend name
  
  # Add titles and labels
  labs(title = "Number of Open Burn Complaints", 
       subtitle = "by Vermont Counties in 2023",
       caption = "Source: BEAR 2.0") +
  
  # Customize the theme and hide the size legend
  theme_minimal() +
  guides(size = "none") # Hide the size legend
