# Install CRAN packages
install.packages(c("tidyverse", "ggplot2", "sf", "rnaturalearth", "rnaturalearthdata", "dplyr", "viridis"))

# Install devtools package
install.packages("devtools")

# Install rnaturalearthhires from GitHub
devtools::install_github("ropensci/rnaturalearthhires")

# List of packages to load
packages <- c("ggspatial", "tidyverse", "readxl", "ggplot2", "sf", 
              "rnaturalearth", "devtools", "dplyr", "viridis")

# Load all packages
lapply(packages, library, character.only = TRUE)

# Set the working directory where project is saved
setwd("Y:/AP_Compliance/Projects/BEAR data analysis")

# List files in the directory to confirm which file to load
list.files("Y:/AP_Compliance/Projects/BEAR data analysis")

# Load the complaints data
## This is the only file name that will chnage based on year
### Use the following naming method to keep files organized Y:/AP_Compliance/Projects/BEAR data analysis/XXXX/XXXX_Data_BEAR.xlsx"
complaints_data <- read_excel("Y:/AP_Compliance/Projects/BEAR data analysis/2023/2023_Data_BEAR.xlsx")

# Load the county coordinates data
counties_data <- read_csv("Y:/AP_Compliance/Projects/BEAR data analysis/County_Coordinates.csv")

# Load the county boundaries data
## Data retrieved from https://geodata.vermont.gov/datasets/003794d558074f9e98158c46f8265878/explore 
### downloaded as a GeoJSON file 
county_boundaries <- st_read("FS_VCGI_OPENDATA_Boundary_BNDHASH_poly_counties_SP_v1_-196546973346571976 (2).geojson")

# Convert counties data to spatial data
## Converting data to spatial format (sf) is essential for geographic analysis and visualization, as it allows for spatial operations like joining datasets based on location and plotting geographic features accurately on maps.
counties_data_sf <- counties_data %>%
  mutate(Latitude = as.numeric(Latitude),
         Longitude = as.numeric(Longitude)) %>%
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)

# Aggregate the number of complaints by county
complaints_count <- complaints_data %>%
  group_by(County) %>%
  summarize(Complaints = n(), .groups = 'drop')

# Ensure proper case and matching
## when downloaded from BEAR vs 
complaints_count$County <- str_to_upper(complaints_count$County)
counties_data_sf$County <- str_to_upper(counties_data_sf$County)

# Join the complaints count with the counties data
counties_data_sf <- counties_data_sf %>%
  left_join(complaints_count, by = "County")

# Plot the map with Vermont boundaries and complaint density
ggplot() +
  # Plot the boundaries
  geom_sf(data = county_boundaries, fill = "white", color = "black") +
  
  # Add complaint data
  geom_sf(data = counties_data_sf, aes(size = Complaints, color = Complaints), alpha = 0.6) +
  
  # Customize color and size scales
  scale_color_viridis_c(option = "cividis", name = "Number of Complaints") +
  scale_size_continuous(range = c(1, 10)) +
  
  # Add titles and labels
  labs(title = "Number of Open Burn Complaints", 
       subtitle = "by Vermont Counties in 2023",
       caption = "Source: BEAR 2.0") +
  
  # Customize the theme and hide the size legend
  theme_minimal() +
  guides(size = "none") # Hide the size legend

